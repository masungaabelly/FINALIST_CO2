{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "1199cb92-b600-44ce-936d-9ef9ae2a8fc2",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "2025-05-30 11:11:04.285 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.316 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.330 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.338 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.440 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.443 WARNING streamlit.runtime.scriptrunner_utils.script_run_context: Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.544 \n",
      "  \u001b[33m\u001b[1mWarning:\u001b[0m to view this Streamlit app on a browser, run it with the following\n",
      "  command:\n",
      "\n",
      "    streamlit run C:\\Users\\abel2\\anaconda3\\Lib\\site-packages\\ipykernel_launcher.py [ARGUMENTS]\n",
      "2025-05-30 11:11:04.546 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.573 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.575 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:04.576 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:05.085 Thread 'Thread-5': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:05.098 Thread 'Thread-5': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.057 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.059 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.061 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.064 Session state does not function when running a script without `streamlit run`\n",
      "2025-05-30 11:11:14.066 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.068 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.070 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.075 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.078 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.079 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.081 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.083 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.091 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.093 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.095 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.100 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.102 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.106 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.109 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.111 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.113 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.117 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.119 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.124 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.126 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.127 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.129 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.133 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.134 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.136 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.141 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.143 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.145 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.147 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.150 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.151 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.153 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.158 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.160 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.163 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.165 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.166 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.167 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.169 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.175 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.176 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.178 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.180 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.182 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.184 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n",
      "2025-05-30 11:11:14.185 Thread 'MainThread': missing ScriptRunContext! This warning can be ignored when running in bare mode.\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "DeltaGenerator(_form_data=FormData(form_id='login_form'))"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import streamlit as st\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import joblib\n",
    "import plotly.express as px\n",
    "import plotly.graph_objects as go\n",
    "from pymongo import MongoClient\n",
    "from datetime import datetime\n",
    "import bcrypt\n",
    "import time\n",
    "from streamlit_extras.switch_page_button import switch_page\n",
    "from streamlit.components.v1 import html\n",
    "import extra_streamlit_components as stx\n",
    "import json\n",
    "\n",
    "# Page configuration - Modern full-width layout\n",
    "st.set_page_config(\n",
    "    page_title=\"EcoTrack Pro\",\n",
    "    page_icon=\"🌿\",\n",
    "    layout=\"wide\",\n",
    "    initial_sidebar_state=\"collapsed\"\n",
    ")\n",
    "\n",
    "# Custom CSS for modern styling\n",
    "def inject_custom_css():\n",
    "    st.markdown(\"\"\"\n",
    "    <style>\n",
    "        :root {\n",
    "            --primary: #4CAF50;\n",
    "            --secondary: #8BC34A;\n",
    "            --accent: #FFC107;\n",
    "            --dark: #263238;\n",
    "            --light: #ECEFF1;\n",
    "            --danger: #F44336;\n",
    "            --warning: #FF9800;\n",
    "        }\n",
    "        \n",
    "        /* Main container */\n",
    "        .stApp {\n",
    "            background-color: #f5f7fa;\n",
    "            color: var(--dark);\n",
    "        }\n",
    "        \n",
    "        /* Headers */\n",
    "        h1, h2, h3, h4, h5, h6 {\n",
    "            color: var(--dark) !important;\n",
    "            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n",
    "        }\n",
    "        \n",
    "        /* Buttons */\n",
    "        .stButton>button {\n",
    "            border-radius: 8px !important;\n",
    "            padding: 8px 16px !important;\n",
    "            font-weight: 500 !important;\n",
    "            transition: all 0.3s ease !important;\n",
    "        }\n",
    "        \n",
    "        .stButton>button:hover {\n",
    "            transform: translateY(-2px) !important;\n",
    "            box-shadow: 0 4px 8px rgba(0,0,0,0.1) !important;\n",
    "        }\n",
    "        \n",
    "        .primary-button {\n",
    "            background-color: var(--primary) !important;\n",
    "            color: white !important;\n",
    "        }\n",
    "        \n",
    "        /* Cards */\n",
    "        .card {\n",
    "            border-radius: 12px;\n",
    "            box-shadow: 0 4px 12px rgba(0,0,0,0.1);\n",
    "            padding: 20px;\n",
    "            margin-bottom: 20px;\n",
    "            background: white;\n",
    "            transition: transform 0.3s ease, box-shadow 0.3s ease;\n",
    "        }\n",
    "        \n",
    "        .card:hover {\n",
    "            transform: translateY(-5px);\n",
    "            box-shadow: 0 8px 16px rgba(0,0,0,0.15);\n",
    "        }\n",
    "        \n",
    "        /* Input fields */\n",
    "        .stTextInput>div>div>input, \n",
    "        .stNumberInput>div>div>input,\n",
    "        .stSelectbox>div>div>select {\n",
    "            border-radius: 8px !important;\n",
    "            border: 1px solid #ddd !important;\n",
    "            padding: 10px !important;\n",
    "        }\n",
    "        \n",
    "        /* Sidebar */\n",
    "        .st-emotion-cache-6qob1r {\n",
    "            background: linear-gradient(135deg, var(--dark), #37474F) !important;\n",
    "            color: white !important;\n",
    "        }\n",
    "        \n",
    "        /* Navigation */\n",
    "        .nav-item {\n",
    "            padding: 10px 15px;\n",
    "            border-radius: 8px;\n",
    "            margin: 5px 0;\n",
    "            cursor: pointer;\n",
    "            transition: all 0.3s ease;\n",
    "        }\n",
    "        \n",
    "        .nav-item:hover {\n",
    "            background-color: rgba(255,255,255,0.1);\n",
    "        }\n",
    "        \n",
    "        .nav-item.active {\n",
    "            background-color: var(--primary);\n",
    "        }\n",
    "        \n",
    "        /* Animations */\n",
    "        @keyframes fadeIn {\n",
    "            from { opacity: 0; transform: translateY(10px); }\n",
    "            to { opacity: 1; transform: translateY(0); }\n",
    "        }\n",
    "        \n",
    "        .fade-in {\n",
    "            animation: fadeIn 0.5s ease forwards;\n",
    "        }\n",
    "        \n",
    "        /* Dashboard metrics */\n",
    "        .metric-card {\n",
    "            background: white;\n",
    "            border-radius: 10px;\n",
    "            padding: 15px;\n",
    "            box-shadow: 0 4px 8px rgba(0,0,0,0.1);\n",
    "            text-align: center;\n",
    "        }\n",
    "        \n",
    "        .metric-value {\n",
    "            font-size: 2rem;\n",
    "            font-weight: 700;\n",
    "            color: var(--primary);\n",
    "            margin: 10px 0;\n",
    "        }\n",
    "        \n",
    "        /* Tooltips */\n",
    "        .tooltip {\n",
    "            position: relative;\n",
    "            display: inline-block;\n",
    "        }\n",
    "        \n",
    "        .tooltip .tooltiptext {\n",
    "            visibility: hidden;\n",
    "            width: 200px;\n",
    "            background-color: var(--dark);\n",
    "            color: white;\n",
    "            text-align: center;\n",
    "            border-radius: 6px;\n",
    "            padding: 5px;\n",
    "            position: absolute;\n",
    "            z-index: 1;\n",
    "            bottom: 125%;\n",
    "            left: 50%;\n",
    "            transform: translateX(-50%);\n",
    "            opacity: 0;\n",
    "            transition: opacity 0.3s;\n",
    "        }\n",
    "        \n",
    "        .tooltip:hover .tooltiptext {\n",
    "            visibility: visible;\n",
    "            opacity: 1;\n",
    "        }\n",
    "        \n",
    "        /* Responsive grid */\n",
    "        @media (max-width: 768px) {\n",
    "            .col {\n",
    "                flex: 100% !important;\n",
    "                max-width: 100% !important;\n",
    "            }\n",
    "        }\n",
    "    </style>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "\n",
    "inject_custom_css()\n",
    "\n",
    "# Database setup\n",
    "def get_db():\n",
    "    client = MongoClient(\"mongodb://localhost:27017/\")\n",
    "    db = client[\"ecotrack_pro\"]\n",
    "    return db\n",
    "\n",
    "# User management functions\n",
    "def init_db():\n",
    "    db = get_db()\n",
    "    if \"users\" not in db.list_collection_names():\n",
    "        db.create_collection(\"users\")\n",
    "    if \"predictions\" not in db.list_collection_names():\n",
    "        db.create_collection(\"predictions\")\n",
    "    return db\n",
    "\n",
    "db = init_db()\n",
    "\n",
    "def create_user(username, email, password):\n",
    "    if db.users.find_one({\"$or\": [{\"username\": username}, {\"email\": email}]}):\n",
    "        return False\n",
    "    hashed = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt())\n",
    "    db.users.insert_one({\n",
    "        \"username\": username,\n",
    "        \"email\": email,\n",
    "        \"password\": hashed,\n",
    "        \"created_at\": datetime.now(),\n",
    "        \"role\": \"user\"\n",
    "    })\n",
    "    return True\n",
    "\n",
    "def verify_user(username, password):\n",
    "    user = db.users.find_one({\"username\": username})\n",
    "    if user and bcrypt.checkpw(password.encode('utf-8'), user[\"password\"]):\n",
    "        return user\n",
    "    return None\n",
    "\n",
    "def save_prediction(user_id, prediction_data):\n",
    "    prediction_data[\"user_id\"] = user_id\n",
    "    prediction_data[\"timestamp\"] = datetime.now()\n",
    "    db.predictions.insert_one(prediction_data)\n",
    "    return True\n",
    "\n",
    "def get_user_predictions(user_id):\n",
    "    return list(db.predictions.find({\"user_id\": user_id}, {\"_id\": 0}))\n",
    "\n",
    "# Model loading\n",
    "@st.cache_resource\n",
    "def load_model():\n",
    "    try:\n",
    "        model = joblib.load(\"carbon_dioxide_rate.pkl\")\n",
    "        return model\n",
    "    except Exception as e:\n",
    "        st.error(f\"Model loading failed: {str(e)}\")\n",
    "        return None\n",
    "\n",
    "model = load_model()\n",
    "\n",
    "# Session state management\n",
    "if 'authenticated' not in st.session_state:\n",
    "    st.session_state.authenticated = False\n",
    "if 'current_user' not in st.session_state:\n",
    "    st.session_state.current_user = None\n",
    "if 'predictions' not in st.session_state:\n",
    "    st.session_state.predictions = []\n",
    "\n",
    "# Auth pages\n",
    "def login_page():\n",
    "    st.title(\"🔐 EcoTrack Pro Login\")\n",
    "    st.markdown(\"<div class='fade-in'>\", unsafe_allow_html=True)\n",
    "    \n",
    "    with st.container():\n",
    "        col1, col2, col3 = st.columns([1,2,1])\n",
    "        with col2:\n",
    "            with st.form(\"login_form\"):\n",
    "                username = st.text_input(\"Username\", placeholder=\"Enter your username\")\n",
    "                password = st.text_input(\"Password\", type=\"password\", placeholder=\"Enter your password\")\n",
    "                submit = st.form_submit_button(\"Login\", type=\"primary\")\n",
    "                \n",
    "                if submit:\n",
    "                    user = verify_user(username, password)\n",
    "                    if user:\n",
    "                        st.session_state.authenticated = True\n",
    "                        st.session_state.current_user = user\n",
    "                        st.success(\"Login successful!\")\n",
    "                        time.sleep(1)\n",
    "                        st.rerun()\n",
    "                    else:\n",
    "                        st.error(\"Invalid username or password\")\n",
    "            \n",
    "            st.markdown(\"\"\"\n",
    "            <div style=\"text-align: center; margin-top: 20px;\">\n",
    "                <p>Don't have an account? <a href=\"/register\" target=\"_self\">Register here</a></p>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "    st.markdown(\"</div>\", unsafe_allow_html=True)\n",
    "\n",
    "def register_page():\n",
    "    st.title(\"📝 Create Your EcoTrack Account\")\n",
    "    st.markdown(\"<div class='fade-in'>\", unsafe_allow_html=True)\n",
    "    \n",
    "    with st.container():\n",
    "        col1, col2, col3 = st.columns([1,2,1])\n",
    "        with col2:\n",
    "            with st.form(\"register_form\"):\n",
    "                username = st.text_input(\"Choose a username\", placeholder=\"Username\")\n",
    "                email = st.text_input(\"Email address\", placeholder=\"your@email.com\")\n",
    "                password = st.text_input(\"Create a password\", type=\"password\", placeholder=\"Password\")\n",
    "                password2 = st.text_input(\"Confirm password\", type=\"password\", placeholder=\"Confirm password\")\n",
    "                submit = st.form_submit_button(\"Register\", type=\"primary\")\n",
    "                \n",
    "                if submit:\n",
    "                    if password != password2:\n",
    "                        st.error(\"Passwords don't match!\")\n",
    "                    elif len(password) < 8:\n",
    "                        st.error(\"Password must be at least 8 characters\")\n",
    "                    else:\n",
    "                        if create_user(username, email, password):\n",
    "                            st.success(\"Account created successfully! Please login.\")\n",
    "                            time.sleep(2)\n",
    "                            switch_page(\"login\")\n",
    "                        else:\n",
    "                            st.error(\"Username or email already exists\")\n",
    "            \n",
    "            st.markdown(\"\"\"\n",
    "            <div style=\"text-align: center; margin-top: 20px;\">\n",
    "                <p>Already have an account? <a href=\"/login\" target=\"_self\">Login here</a></p>\n",
    "            </div>\n",
    "            \"\"\", unsafe_allow_html=True)\n",
    "    st.markdown(\"</div>\", unsafe_allow_html=True)\n",
    "\n",
    "# Main app pages\n",
    "def dashboard_page():\n",
    "    st.title(\"🌿 EcoTrack Pro Dashboard\")\n",
    "    st.markdown(\"<div class='fade-in'>\", unsafe_allow_html=True)\n",
    "    \n",
    "    # User greeting\n",
    "    st.markdown(f\"\"\"\n",
    "    <div class=\"card\">\n",
    "        <h3>Welcome back, {st.session_state.current_user['username']}!</h3>\n",
    "        <p>Track and analyze your vehicle emissions with our powerful tools.</p>\n",
    "    </div>\n",
    "    \"\"\", unsafe_allow_html=True)\n",
    "    \n",
    "    # Quick stats\n",
    "    user_preds = get_user_predictions(st.session_state.current_user[\"_id\"])\n",
    "    num_preds = len(user_preds)\n",
    "    avg_co2 = np.mean([p[\"predicted_co2\"] for p in user_preds]) if num_preds > 0 else 0\n",
    "    \n",
    "    col1, col2, col3 = st.columns(3)\n",
    "    with col1:\n",
    "        st.markdown(f\"\"\"\n",
    "        <div class=\"metric-card\">\n",
    "            <h4>Total Predictions</h4>\n",
    "            <div class=\"metric-value\">{num_preds}</div>\n",
    "            <p>All time records</p>\n",
    "        </div>\n",
    "        \"\"\", unsafe_allow_html=True)\n",
    "    with col2:\n",
    "        st.markdown(f\"\"\"\n",
    "        <div class=\"metric-card\">\n",
    "            <h4>Average CO2</h4>\n",
    "            <div class=\"metric-value\">{avg_co2:.1f}</div>\n",
    "            <p>grams per km</p>\n",
    "        </div>\n",
    "        \"\"\", unsafe_allow_html=True)\n",
    "    with col3:\n",
    "        st.markdown(f\"\"\"\n",
    "        <div class=\"metric-card\">\n",
    "            <h4>Last Prediction</h4>\n",
    "            <div class=\"metric-value\">\n",
    "                {user_preds[-1]['predicted_co2']:.1f} g/km\n",
    "            </div>\n",
    "            <p>{user_preds[-1]['timestamp'].strftime('%Y-%m-%d') if num_preds > 0 else 'N/A'}</p>\n",
    "        </div>\n",
    "        \"\"\", unsafe_allow_html=True)\n",
    "    \n",
    "    # Main content tabs\n",
    "    tab1, tab2, tab3 = st.tabs([\"🚗 New Prediction\", \"📊 My Data\", \"⚙️ Account\"])\n",
    "    \n",
    "    with tab1:\n",
    "        st.header(\"New Vehicle Analysis\")\n",
    "        with st.form(\"prediction_form\"):\n",
    "            col1, col2 = st.columns(2)\n",
    "            \n",
    "            with col1:\n",
    "                engine_size = st.slider(\"Engine Size (L)\", 1.0, 8.0, 2.4, 0.1)\n",
    "                cylinders = st.selectbox(\"Number of Cylinders\", [3, 4, 5, 6, 8, 10, 12])\n",
    "            \n",
    "            with col2:\n",
    "                fuel_city = st.number_input(\"City Fuel Consumption (L/100km)\", 3.0, 30.0, 9.5, 0.1)\n",
    "                fuel_hwy = st.number_input(\"Highway Fuel Consumption (L/100km)\", 3.0, 25.0, 7.5, 0.1)\n",
    "            \n",
    "            submitted = st.form_submit_button(\"Calculate Emissions\", type=\"primary\")\n",
    "            \n",
    "            if submitted and model:\n",
    "                input_data = np.array([[engine_size, cylinders, fuel_city, fuel_hwy]])\n",
    "                predicted_co2 = model.predict(input_data)[0]\n",
    "                \n",
    "                # Classify emission level\n",
    "                if predicted_co2 > 250:\n",
    "                    emission_level = \"High\"\n",
    "                    level_class = \"emission-high\"\n",
    "                elif predicted_co2 > 150:\n",
    "                    emission_level = \"Medium\"\n",
    "                    level_class = \"emission-medium\"\n",
    "                else:\n",
    "                    emission_level = \"Low\"\n",
    "                    level_class = \"emission-low\"\n",
    "                \n",
    "                # Save prediction\n",
    "                prediction_data = {\n",
    "                    \"engine_size\": engine_size,\n",
    "                    \"cylinders\": cylinders,\n",
    "                    \"fuel_city\": fuel_city,\n",
    "                    \"fuel_hwy\": fuel_hwy,\n",
    "                    \"predicted_co2\": float(predicted_co2),\n",
    "                    \"emission_level\": emission_level\n",
    "                }\n",
    "                save_prediction(st.session_state.current_user[\"_id\"], prediction_data)\n",
    "                st.session_state.predictions.append(prediction_data)\n",
    "                \n",
    "                # Display results\n",
    "                st.markdown(f\"\"\"\n",
    "                <div class=\"card\">\n",
    "                    <h3>Results</h3>\n",
    "                    <p>Estimated CO2 Emissions: <span class=\"{level_class}\" style=\"font-size: 1.5rem;\">{predicted_co2:.1f} g/km</span></p>\n",
    "                    <p>Emission Level: <span class=\"{level_class}\">{emission_level}</span></p>\n",
    "                    \n",
    "                    <div class=\"tooltip\">\n",
    "                        <button class=\"primary-button\" style=\"margin-top: 15px;\">View Recommendations</button>\n",
    "                        <span class=\"tooltiptext\">See tailored suggestions to reduce emissions</span>\n",
    "                    </div>\n",
    "                </div>\n",
    "                \"\"\", unsafe_allow_html=True)\n",
    "                \n",
    "                # Visualization\n",
    "                fig = go.Figure(go.Indicator(\n",
    "                    mode = \"gauge+number\",\n",
    "                    value = predicted_co2,\n",
    "                    domain = {'x': [0, 1], 'y': [0, 1]},\n",
    "                    title = {'text': \"CO2 Emission Level\"},\n",
    "                    gauge = {\n",
    "                        'axis': {'range': [100, 350]},\n",
    "                        'steps': [\n",
    "                            {'range': [100, 150], 'color': \"#4CAF50\"},\n",
    "                            {'range': [150, 250], 'color': \"#FFC107\"},\n",
    "                            {'range': [250, 350], 'color': \"#F44336\"}],\n",
    "                        'threshold': {\n",
    "                            'line': {'color': \"black\", 'width': 4},\n",
    "                            'thickness': 0.75,\n",
    "                            'value': predicted_co2}\n",
    "                    }\n",
    "                ))\n",
    "                st.plotly_chart(fig, use_container_width=True)\n",
    "    \n",
    "    with tab2:\n",
    "        st.header(\"My Prediction History\")\n",
    "        \n",
    "        if len(user_preds) > 0:\n",
    "            df = pd.DataFrame(user_preds)\n",
    "            df['timestamp'] = pd.to_datetime(df['timestamp'])\n",
    "            \n",
    "            # Interactive data table\n",
    "            st.dataframe(df.sort_values('timestamp', ascending=False), use_container_width=True)\n",
    "            \n",
    "            # Download options\n",
    "            st.subheader(\"Export Data\")\n",
    "            col1, col2 = st.columns(2)\n",
    "            \n",
    "            with col1:\n",
    "                csv = df.to_csv(index=False)\n",
    "                st.download_button(\n",
    "                    label=\"Download as CSV\",\n",
    "                    data=csv,\n",
    "                    file_name=f\"ecotrack_predictions_{datetime.now().strftime('%Y%m%d')}.csv\",\n",
    "                    mime=\"text/csv\",\n",
    "                    key='csv-download'\n",
    "                )\n",
    "            \n",
    "            with col2:\n",
    "                excel_buffer = io.BytesIO()\n",
    "                with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:\n",
    "                    df.to_excel(writer, index=False)\n",
    "                st.download_button(\n",
    "                    label=\"Download as Excel\",\n",
    "                    data=excel_buffer.getvalue(),\n",
    "                    file_name=f\"ecotrack_predictions_{datetime.now().strftime('%Y%m%d')}.xlsx\",\n",
    "                    mime=\"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet\",\n",
    "                    key='excel-download'\n",
    "                )\n",
    "            \n",
    "            # Visualizations\n",
    "            st.subheader(\"Trend Analysis\")\n",
    "            tab1, tab2 = st.tabs([\"Timeline\", \"Engine Analysis\"])\n",
    "            \n",
    "            with tab1:\n",
    "                fig = px.line(df, x='timestamp', y='predicted_co2', \n",
    "                              title=\"Your CO2 Emission Trend Over Time\",\n",
    "                              labels={'predicted_co2': 'CO2 Emissions (g/km)'})\n",
    "                st.plotly_chart(fig, use_container_width=True)\n",
    "            \n",
    "            with tab2:\n",
    "                fig = px.scatter(df, x='engine_size', y='predicted_co2', \n",
    "                                color='cylinders',\n",
    "                                title=\"Engine Size vs CO2 Emissions\",\n",
    "                                trendline=\"lowess\")\n",
    "                st.plotly_chart(fig, use_container_width=True)\n",
    "        else:\n",
    "            st.info(\"You haven't made any predictions yet. Get started with the New Prediction tab.\")\n",
    "    \n",
    "    with tab3:\n",
    "        st.header(\"Account Settings\")\n",
    "        \n",
    "        with st.form(\"account_form\"):\n",
    "            current_email = st.text_input(\"Email\", value=st.session_state.current_user.get('email', ''))\n",
    "            new_password = st.text_input(\"New Password\", type=\"password\", placeholder=\"Leave blank to keep current\")\n",
    "            confirm_password = st.text_input(\"Confirm New Password\", type=\"password\", placeholder=\"Leave blank to keep current\")\n",
    "            \n",
    "            if st.form_submit_button(\"Update Account\", type=\"primary\"):\n",
    "                if new_password and new_password != confirm_password:\n",
    "                    st.error(\"Passwords don't match!\")\n",
    "                else:\n",
    "                    update_data = {}\n",
    "                    if current_email != st.session_state.current_user.get('email', ''):\n",
    "                        update_data['email'] = current_email\n",
    "                    if new_password:\n",
    "                        update_data['password'] = bcrypt.hashpw(new_password.encode('utf-8'), bcrypt.gensalt())\n",
    "                    \n",
    "                    if update_data:\n",
    "                        db.users.update_one(\n",
    "                            {\"_id\": st.session_state.current_user[\"_id\"]},\n",
    "                            {\"$set\": update_data}\n",
    "                        )\n",
    "                        st.success(\"Account updated successfully!\")\n",
    "                        st.session_state.current_user.update(update_data)\n",
    "        \n",
    "        st.markdown(\"---\")\n",
    "        if st.button(\"Logout\", type=\"secondary\"):\n",
    "            st.session_state.authenticated = False\n",
    "            st.session_state.current_user = None\n",
    "            st.rerun()\n",
    "    \n",
    "    st.markdown(\"</div>\", unsafe_allow_html=True)\n",
    "\n",
    "# Page routing\n",
    "if not st.session_state.authenticated:\n",
    "    current_page = st.query_params.get(\"page\", [\"login\"])[0]\n",
    "    if current_page == \"login\":\n",
    "        login_page()\n",
    "    elif current_page == \"register\":\n",
    "        register_page()\n",
    "    else:\n",
    "        login_page()\n",
    "else:\n",
    "    dashboard_page()\n",
    "\n",
    "# Footer\n",
    "st.markdown(\"\"\"\n",
    "<footer style=\"text-align: center; padding: 20px; margin-top: 50px; color: #666;\">\n",
    "    <p>© 2023 EcoTrack Pro | Sustainable Mobility Analytics</p>\n",
    "</footer>\n",
    "\"\"\", unsafe_allow_html=True)\n",
    "\n",
    "# JavaScript for smooth transitions\n",
    "st.components.v1.html(\"\"\"\n",
    "<script>\n",
    "    // Smooth scrolling for anchor links\n",
    "    document.querySelectorAll('a[href^=\"#\"]').forEach(anchor => {\n",
    "        anchor.addEventListener('click', function (e) {\n",
    "            e.preventDefault();\n",
    "            document.querySelector(this.getAttribute('href')).scrollIntoView({\n",
    "                behavior: 'smooth'\n",
    "            });\n",
    "        });\n",
    "    });\n",
    "    \n",
    "    // Add animation class to elements as they come into view\n",
    "    const observer = new IntersectionObserver((entries) => {\n",
    "        entries.forEach(entry => {\n",
    "            if (entry.isIntersecting) {\n",
    "                entry.target.classList.add('fade-in');\n",
    "            }\n",
    "        });\n",
    "    }, {threshold: 0.1});\n",
    "    \n",
    "    document.querySelectorAll('.card, .metric-card').forEach(card => {\n",
    "        observer.observe(card);\n",
    "    });\n",
    "</script>\n",
    "\"\"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "fb35aa25-09be-4535-8029-60496ac4c7f7",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  },
  "widgets": {
   "application/vnd.jupyter.widget-state+json": {
    "state": {},
    "version_major": 2,
    "version_minor": 0
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
